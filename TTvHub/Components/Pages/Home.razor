@page "/"
@using TTvHub.Core.Managers
@inject ISnackbar Snackbar
@inject LuaStartUpManager StartUpManager
@inject TwitchController Twitch

<MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.Center" Class="py-4 px-4">
        <MudPaper >
            <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Row="true">
                <MudAvatar Elevation="2" Size="Size.Large" Variant="Variant.Outlined" Class="mx-4 my-4">
                    @if (Twitch.Auth.IsAuthenticated || string.IsNullOrEmpty(Twitch.ProfilePictureUrl))
                    {
                        <MudImage Width="200" Src="@Twitch.ProfilePictureUrl" />
                    }
                    else
                    {
                        <MudIcon Color="Color.Info" Icon="@Icons.Material.Filled.QuestionMark"/>
                    }
                </MudAvatar>
                <MudStack Class="-py-2 -px-2">
                    <MudText Typo="Typo.h4" Align="Align.Left">Login: @Twitch.Auth.Login</MudText>
                    <MudText Typo="Typo.body1" Align="Align.Left">Twitch id: @Twitch.Auth.TwitchId</MudText>
                </MudStack>
                @if (Twitch.IsAuthenticated)
                {
                    <MudButton Class="mx-2 my-2" StartIcon="@Icons.Material.Filled.Cancel" ButtonType="ButtonType.Submit" Size="Size.Small" Variant="Variant.Outlined" Color="Color.Error" OnClick="LogoutAsync"> Logout</MudButton>
                }
                else
                {
                    <MudButton Class="mx-2 my-2" StartIcon="@Icons.Material.Filled.Send" ButtonType="ButtonType.Submit" Size="Size.Small" Variant="Variant.Outlined" Color="Color.Info" OnClick="LoginAsync"> Login</MudButton>
                }
            </MudStack>
            <MudDivider Light="true" DividerType="DividerType.Middle" Class="px-2 py-2"/>
            <MudStack Row="true" Justify="Justify.Center" AlignItems="AlignItems.Start" Class="px-2 py-2">
                <MudText Typo="Typo.body1" Align="Align.Start"> Chat module </MudText>
                <MudSpacer/>
                <MudButton Variant="Variant.Outlined" Size="Size.Small"> Some cool text </MudButton>
            </MudStack>
        </MudPaper>
        <MudPaper Class="mx-4 my-4 px-4 py-4">
            <MudText Typo="Typo.h3"> Main Configuration </MudText>
            <MudText Typo="Typo.h3"> Main Configuration </MudText>
            <MudText Typo="Typo.h3"> Main Configuration </MudText>
            <MudText Typo="Typo.h3"> Main Configuration </MudText>
            <MudText Typo="Typo.h3"> Main Configuration </MudText>
        </MudPaper>
        <MudPaper Class="mx-4 my-4 px-4 py-4">
            <MudText Typo="Typo.h3"> Additional screen </MudText>
            <MudText Typo="Typo.h3"> Additional screen </MudText>
            <MudText Typo="Typo.h3"> Additional screen </MudText>
            <MudText Typo="Typo.h3"> Additional screen </MudText>
            <MudText Typo="Typo.h3"> Additional screen </MudText>
            
        </MudPaper>
</MudStack>


@code{

    protected override async Task OnInitializedAsync()
    {
        // if (!StartUpManager.IsConfigured)
        // {
        //     try
        //     {
        //         await StartUpManager.ReadMainConfigAsync();
        //         Snackbar.Add("Main configuration readed", Severity.Success);
        //     }
        //     catch (Exception ex)
        //     {
        //         Snackbar.Add($"Error occured: {ex.Message}", Severity.Error);
        //     }
        // }
        try
        {
            await Twitch.InitializeAsync(); 
            if (Twitch.Auth.IsAuthenticated && string.IsNullOrEmpty(Twitch.ProfilePictureUrl))
            {
                await Twitch.RequestProfilePicture();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error occured: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoginAsync()
    {
        await Twitch.Auth.LoginAsync();
    }

    private async Task LogoutAsync()
    {
        await Twitch.Auth.LogoutAsync();
    }
}